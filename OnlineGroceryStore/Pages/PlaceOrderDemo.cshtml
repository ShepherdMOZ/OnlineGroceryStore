@page
@model OnlineGroceryStore.Pages.PlaceOrderDemoModel

@{
    ViewData["Title"] = "Place Order Page";
}

<h1>Place Order Demo</h1>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.InventoryPackingConfigure[0].inventory)
            </th>
            <th>
                Order Amount
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InventoryPackingConfigure[0].packSize)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InventoryPackingConfigure[0].packPrice)
            </th>
            <th>
                Pack Breakdown
            </th>
            <th>
                Total Price
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Inventories)
        {
            <tr>
                <td rowspan="@item.packs.Count">
                    @Html.DisplayFor(modelItem => item.itemName)
                </td>
                <td rowspan="@item.packs.Count">
                    <input class="totalQuantityInput" id="@item.itemCode" type="number" placeholder="input hit enter" />
                    <br>
                    <p style="max-width:150px;" id="overshoot-@item.itemCode"> </p>
                </td>
                @{
                    int i = 0;

                    @foreach (var pack in item.packs)
                    {
                        if (i > 0)
                        {
                        @: </tr><tr>
                        }
                        <td id="size-pack-@pack.packingID" related="@pack.inventory.itemCode">
                            @Html.DisplayFor(modelItem => pack.packSize) per pack
                        </td>
                        <td id="price-pack-@pack.packingID" related="@pack.inventory.itemCode">
                            $ @Html.DisplayFor(modelItem => pack.packPrice)
                        </td>
                        <td>
                            x <input class="packBreakdownInput item-@pack.inventory.itemCode" id="pack-@pack.packingID" related="@pack.inventory.itemCode"  type="number" placeholder="input hit enter" /> pack(s)
                        </td>
                        i++;
                    }
                }
                <td id="price-@item.itemCode"></td>
            </tr>
        }
    </tbody>
</table>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<script>
    var APIOnUpdate = false;
    let totalQuantityInputs = document.querySelectorAll('.totalQuantityInput'),
        packBreakdownInputs = document.querySelectorAll('.packBreakdownInput')

    function postData(quantity, code) {
        axios.post('/api/orders/getpacks', {
            quantity: quantity,
            code: code
        }).then((res) => {
            document.querySelectorAll('.packBreakdownInput.item-' + code).forEach((element) => {
                console.log(element);
                element.value = 0
                console.log(element.value);
            });
            APIOnUpdate = true;
            console.log(res);
            res.data.packBreakdowns.forEach((breakdown) => {
                var input_source = document.querySelector('#pack-' + breakdown.packingID.toString() + '.packBreakdownInput');
                input_source.value = breakdown.packQuantity
            });
            document.querySelector('#price-' + code).innerHTML = '$ ' + res.data.totalPrice;
            if (res.data.totalQuantity < quantity) {
                document.querySelector('#overshoot-' + code).innerHTML = "Current pack can only provide " + res.data.totalQuantity + " items in total, please add packages manually on demand"
            } else {
                document.querySelector('#overshoot-' + code).innerHTML = ""
            }
        }).catch((err) => {
            alert(err.message);
        }).finally(() => {
            APIOnUpdate = false;
        })
    }

    //const axios = require('axios');
    totalQuantityInputs.forEach((element)=>{
        element.addEventListener('change', (event) => {
            console.log(event.target.value);
            postData(event.target.value, event.target.getAttribute("id"));
        })
    });

    packBreakdownInputs.forEach((element)=>{
        element.addEventListener('change', (event) => {
            if (!APIOnUpdate) {

                var packingId = event.target.getAttribute("id");
                var related_element_id = event.target.getAttribute("related");
                let relatedQuantityInput = document.querySelector('.totalQuantityInput#' + related_element_id.toString());
                console.log('#size-' + packingId.toString());
                var newQuantity = 0;
                document.querySelectorAll('.packBreakdownInput.item-' + related_element_id).forEach((element) => {
                    id = element.getAttribute("id");
                    packSize = parseInt(document.querySelector('#size-' + id.toString()).innerHTML);
                    newQuantity += element.value * packSize;

                });
                relatedQuantityInput.value = newQuantity;

                postData(relatedQuantityInput.value, related_element_id);
            }

        })
    });
</script>